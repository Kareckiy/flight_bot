// <auto-generated />
using System;
using FlightsBot.Infrustructure.Implementation.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FlightsBot.Infrustructure.Implementation.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("flights_bot")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "data_provider", new[] { "YANDEX" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "flight_status", new[] { "CREATED", "DELAYED", "IN_PROGRESS", "FINISHED", "CANCELED", "FAILED" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FlightsBot.Domain.Entities.Airplane", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PassengersMaxCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Airplanes", "flights_bot");
                });

            modelBuilder.Entity("FlightsBot.Domain.Entities.Airport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IataCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IataCode")
                        .IsUnique();

                    b.ToTable("Airports", "flights_bot");
                });

            modelBuilder.Entity("FlightsBot.Domain.Entities.Carrier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CodeDataProvider")
                        .HasColumnType("integer");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Carriers", "flights_bot");
                });

            modelBuilder.Entity("FlightsBot.Domain.Entities.Flight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AirplaneId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AirportFromId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AirportToId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CarrierId")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("FinishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PassengersCount")
                        .HasColumnType("integer");

                    b.Property<Instant>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AirplaneId");

                    b.HasIndex("AirportFromId");

                    b.HasIndex("AirportToId");

                    b.HasIndex("CarrierId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Flights", "flights_bot");
                });

            modelBuilder.Entity("FlightsBot.Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FlightId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.ToTable("Notifications", "flights_bot");
                });

            modelBuilder.Entity("FlightsBot.Domain.Entities.Flight", b =>
                {
                    b.HasOne("FlightsBot.Domain.Entities.Airplane", "Airplane")
                        .WithMany()
                        .HasForeignKey("AirplaneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightsBot.Domain.Entities.Airport", "AirportFrom")
                        .WithMany()
                        .HasForeignKey("AirportFromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightsBot.Domain.Entities.Airport", "AirportTo")
                        .WithMany()
                        .HasForeignKey("AirportToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightsBot.Domain.Entities.Carrier", "Carrier")
                        .WithMany()
                        .HasForeignKey("CarrierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Airplane");

                    b.Navigation("AirportFrom");

                    b.Navigation("AirportTo");

                    b.Navigation("Carrier");
                });

            modelBuilder.Entity("FlightsBot.Domain.Entities.Notification", b =>
                {
                    b.HasOne("FlightsBot.Domain.Entities.Flight", "Flight")
                        .WithMany()
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");
                });
#pragma warning restore 612, 618
        }
    }
}
